$date
	Mon Mar 10 17:43:33 2025
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module ALU_ALUctr_tb $end
$var wire 1 ! zero $end
$var wire 32 " Y [31:0] $end
$var wire 5 # ALUop [4:0] $end
$var reg 32 $ A [31:0] $end
$var reg 32 % B [31:0] $end
$var reg 3 & funct3 [2:0] $end
$var reg 7 ' funct7 [6:0] $end
$var reg 7 ( opcode [6:0] $end
$scope module alu $end
$var wire 32 ) A [31:0] $end
$var wire 32 * B [31:0] $end
$var wire 1 ! zero $end
$var wire 5 + ALUop [4:0] $end
$var reg 32 , Y [31:0] $end
$upscope $end
$scope module alu_ctrl $end
$var wire 3 - funct3 [2:0] $end
$var wire 7 . funct7 [6:0] $end
$var wire 7 / opcode [6:0] $end
$var reg 5 0 ALUop [4:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b0 0
b110011 /
b0 .
b0 -
b110000 ,
b0 +
b100000 *
b10000 )
b110011 (
b0 '
b0 &
b100000 %
b10000 $
b0 #
b110000 "
0!
$end
#100
b1 #
b1 +
b1 0
b100000 "
b100000 ,
b100000 '
b100000 .
b10000 %
b10000 *
b110000 $
b110000 )
#200
b10 #
b10 +
b10 0
b100 "
b100 ,
b0 '
b0 .
b1 &
b1 -
b10 %
b10 *
b1 $
b1 )
#300
b11 #
b11 +
b11 0
b1 "
b1 ,
b10 &
b10 -
b10000 %
b10000 *
b11111111111111111111111111110000 $
b11111111111111111111111111110000 )
#400
b100 #
b100 +
b100 0
0!
b1 "
b1 ,
b11 &
b11 -
b11111111111111111111111111110000 %
b11111111111111111111111111110000 *
b10000 $
b10000 )
#500
b11111111 "
b11111111 ,
b101 #
b101 +
b101 0
b100 &
b100 -
b11110000 %
b11110000 *
b1111 $
b1111 )
#600
b110 #
b110 +
b110 0
b100 "
b100 ,
b101 &
b101 -
b10 %
b10 *
b10000 $
b10000 )
#700
b111 #
b111 +
b111 0
b11100000000000000000000000000000 "
b11100000000000000000000000000000 ,
b100000 '
b100000 .
b10000000000000000000000000000000 $
b10000000000000000000000000000000 )
#800
b1000 #
b1000 +
b1000 0
0!
b111100001111000011110000 "
b111100001111000011110000 ,
b0 '
b0 .
b110 &
b110 -
b111100000000000011110000 %
b111100000000000011110000 *
b1111000011110000 $
b1111000011110000 )
#900
b11110000 "
b11110000 ,
b1001 #
b1001 +
b1001 0
b111 &
b111 -
#1000
b100000 "
b100000 ,
b0 #
b0 +
b0 0
b0 &
b0 -
b10000 %
b10000 *
b10000 $
b10000 )
b10011 (
b10011 /
#1100
b11 #
b11 +
b11 0
0!
b1 "
b1 ,
b10 &
b10 -
b11111111111111111111111111110000 $
b11111111111111111111111111110000 )
#1200
b100 #
b100 +
b100 0
0!
b1 "
b1 ,
b11 &
b11 -
b11111111111111111111111111110000 %
b11111111111111111111111111110000 *
b10000 $
b10000 )
#1300
b11111111 "
b11111111 ,
b101 #
b101 +
b101 0
b100 &
b100 -
b11110000 %
b11110000 *
b1111 $
b1111 )
#1400
b1000 #
b1000 +
b1000 0
b111100001111000011110000 "
b111100001111000011110000 ,
b110 &
b110 -
b111100000000000011110000 %
b111100000000000011110000 *
b1111000011110000 $
b1111000011110000 )
#1500
b11110000 "
b11110000 ,
b1001 #
b1001 +
b1001 0
b111 &
b111 -
#1600
b0 #
b0 +
b0 0
b100000 "
b100000 ,
b100000 '
b100000 .
b0 &
b0 -
b10000 %
b10000 *
b10000 $
b10000 )
#1800
b1 "
b1 ,
b1010 #
b1010 +
b1010 0
b1100011 (
b1100011 /
#1900
b1011 #
b1011 +
b1011 0
0!
b1 "
b1 ,
b1 &
b1 -
b100000 %
b100000 *
#2000
b1100 #
b1100 +
b1100 0
b100 &
b100 -
b10000 %
b10000 *
b11111111111111111111111111110000 $
b11111111111111111111111111110000 )
#2100
b1101 #
b1101 +
b1101 0
0!
b1 "
b1 ,
b101 &
b101 -
b11111111111111111111111111110000 %
b11111111111111111111111111110000 *
b10000 $
b10000 )
#2200
b1110 #
b1110 +
b1110 0
b110 &
b110 -
#2300
b1111 #
b1111 +
b1111 0
0!
b1 "
b1 ,
b111 &
b111 -
b10000 %
b10000 *
b11111111111111111111111111110000 $
b11111111111111111111111111110000 )
#2400
